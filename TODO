TODO
====
5. Form: Optimize CSS
6. Form: Example to doc as psgi server.
7. Form: Look to CSS selector '$css-class input, textarea' in Form. If select
   >>$css_class textarea<< or simple textarea.
10. Form: Test other input[type=*] and CSS. And add selector to CSS.
17. Check doc of all elements (init, cleanup, etc)
19. Improve required CSS? There is required="required".
20. Form: We need to have option to CSS selector for situation if obj->css_class
not present. Probably 'form' element. Add tests.
22. Rewrite from CSS::Struct::Output::Indent to CSS::Struct::Output::Structure.
23.

Applied
=======
12. A: Add tests.
OK [20240107] skim

1. _tags_value() move to Utils.
OK [20240107] skim

2. _tags_boolean() move to Utils.
OK [20240107] skim

3. Rewrite Input to _tags_value()
OK [20240107] skim

15. Form: There is issue with CSS for input. It's fired on second time instead
of first.
OK [20240115] skim

13. Add doc for Utils.
OK [20240124] skim

14. Add tests for Utils.
OK [20240124] skim

18. Item: Tests.
NONE [20240126] skim

4. Form: Add tests.
OK [20240205] skim

16. Move Element::Form to Form. And add Element::Form in same way as other.
Maybe simplify, because inner content is similar as e.g. option.
OK [20240205] skim

11. Form: Remove 'submit' param and add to fields. For possibility of two submit
buttons or other.
OK [20240205] skim

8. Form: Helper for button element.
NONE [20240205] skim

9. Form: CSS style for option.
NONE [20240205] skim

21. Rewrite tests from Tags::Output::Raw to Tags::Output::Structure.
OK [20240529] skim
